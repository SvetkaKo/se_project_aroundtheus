!function(){"use strict";class e{constructor(e,t,s,n,r){this._id=e._id,this._name=e.name,this._link=e.link,this._isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteButton=n,this._handleLikeButton=r}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._cardImgElement.addEventListener("click",(()=>{this._handleImageClick(this._name,this._link)})),this._btnLike.addEventListener("click",(e=>{this._handleLikeButton(this._id)})),this._btnDelete.addEventListener("click",(e=>{this._handleDeleteButton(this._id,this._element)}))}remove(){this._element.remove()}isLiked(){return this._isLiked}_renderLikes(){this._isLiked?this._btnLike.classList.add("card__btn-like_active"):this._btnLike.classList.remove("card__btn-like_active")}setIsLiked(e){this._isLiked=e,this._renderLikes()}getCardElement(){return this._element=this._getTemplate(),this._cardTitleElement=this._element.querySelector(".card__title"),this._cardImgElement=this._element.querySelector(".card__img"),this._btnLike=this._element.querySelector(".card__btn-like"),this._btnDelete=this._element.querySelector(".card__btn-delete"),this._cardTitleElement.textContent=this._name,this._cardImgElement.src=this._link,this._cardImgElement.alt=this._name,this._renderLikes(),this._setEventListeners(),this._element}}class t{constructor(e,t){this._options=e,this._form=t}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput(this._inputList)?this.disableSubmitButton():(this._buttonElement.classList.remove(this._options.inactiveButtonClass),this._buttonElement.disabled=!1)}_showInputError(e){const t=this._form.querySelector(`.${e.id}-error`);e.classList.add(this._options.inputErrorClass),t.classList.add(this._options.errorClass),t.textContent=e.validationMessage}_hideInputError(e){const t=this._form.querySelector(`.${e.id}-error`);e.classList.remove(this._options.inputErrorClass),t.classList.remove(this._options.errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e,this._options):this._showInputError(e,this._options)}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._options.inputSelector)),this._buttonElement=this._form.querySelector(this._options.submitButtonSelector),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}disableSubmitButton(){this._buttonElement.classList.add(this._options.inactiveButtonClass),this._buttonElement.disabled=!0}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners(this._form,this._options)}}class s{constructor(e){this._popup=e,this._closeButton=this._popup.querySelector(".popup__btn-close")}open(){this._popup.classList.add("popup_opened"),this.setEventListeners()}close=()=>{this._popup.classList.remove("popup_opened"),this.removeEventListeners()};setEventListeners(){this._closeButton.addEventListener("click",this.close),document.addEventListener("mousedown",this._handleOverlayClick),document.addEventListener("keydown",this._handleEscKeydown)}removeEventListeners(){this._closeButton.removeEventListener("click",this.close),document.removeEventListener("mousedown",this._handleOverlayClick),document.removeEventListener("keydown",this._handleEscKeydown)}_handleOverlayClick=e=>{e.target.classList.contains("popup_opened")&&this.close()};_handleEscKeydown=e=>{"Escape"===e.key&&this.close()}}class n{constructor(e,t){let{data:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=t}addItem(e){this._container.prepend(e)}renderItems(){this._items.forEach(this._renderer)}}class r extends s{constructor(e,t,s){super(e),this._handleSubmit=t,this._popupForm=this._popup.querySelector(".popup__form"),this._popupInputs=this._popupForm.querySelectorAll(".popup__form-input"),this._submitBtn=this._popup.querySelector(".popup__btn-submit"),this._buttonText=this._submitBtn.textContent,this._loadingButtonText=s}renderLoading(e){this._submitBtn.textContent=e?this._loadingButtonText:this._buttonText}_getInputValues(){const e={};return this._popupInputs.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._popupInputs.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){this._popupForm.addEventListener("submit",this._handleSubmitForm),super.setEventListeners()}removeEventListeners(){this._popupForm.removeEventListener("submit",this._handleSubmitForm),super.removeEventListeners()}_handleSubmitForm=e=>{this._handleSubmit(this._getInputValues()),e.preventDefault()};reset(){this._popupForm.reset()}}const i=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkResponse)}getData(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}updateUserInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._checkResponse)}updateProfileImage(e){return console.log(e),fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})}).then(this._checkResponse)}addCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}dislikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"d80b0a8b-56e7-45c3-8099-725247c052b9","Content-Type":"application/json"}}),o={formSelector:".popup__form",inputSelector:".popup__form-input",submitButtonSelector:".popup__btn-submit",inactiveButtonClass:"popup__btn-submit_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_active"},a=document.querySelector(".popup_edit-profile"),h=document.querySelector(".popup_new-card"),l=document.forms.newCardForm,c=document.querySelector(".profile__btn_type_edit"),d=document.querySelector(".profile__btn_type_add"),u=document.querySelector(".profile-photo-edit__edit-btn"),_=document.querySelector(".cards"),p=document.forms.profileForm,m=document.querySelector(".popup_picture"),b=document.querySelector(".popup_confirm-delete"),v=document.querySelector(".popup_edit-profile-image"),E=document.forms.profileEditImageForm;let L;new t(o,p).enableValidation();const f=new t(o,l);f.enableValidation(),new t(o,E).enableValidation();const k=new class extends s{constructor(e){super(e),this._popupPictureImg=e.querySelector(".popup__picture-img"),this._popupPictureTitle=e.querySelector(".popup__picture-title")}open(e,t){this._popupPictureImg.src=t,this._popupPictureImg.alt=e,this._popupPictureTitle.textContent=e,super.open()}}(m),S="Saving...";function g(e,t){k.open(e,t)}function y(t){const s=new e(t,".template-card",g,(()=>{I.setAction((()=>{I.renderLoading(!0),i.deleteCard(t._id).then((()=>{s.remove(),I.close()})).finally((()=>{I.renderLoading(!1)})).catch((e=>{console.error("Error deleting card:",e)}))})),I.open()}),C),n=s.getCardElement();L.addItem(n)}const I=new class extends s{constructor(e,t){super(e),this._popupForm=this._popup.querySelector(".popup__form"),this._submitBtn=this._popup.querySelector(".popup__btn-submit"),this._buttonText=this._submitBtn.textContent,this._loadingButtonText=t}renderLoading(e){this._submitBtn.textContent=e?this._loadingButtonText:this._buttonText}setAction(e){this._action=e}setEventListeners(){this._popupForm.addEventListener("submit",this._handleSubmitForm),super.setEventListeners()}removeEventListeners(){this._popupForm.removeEventListener("submit",this._handleSubmitForm),super.removeEventListeners()}_handleSubmitForm=e=>{e.preventDefault(),this._action()};reset(){this._popupForm.reset()}}(b,S);function C(e){this.isLiked()?i.dislikeCard(e).then((e=>this.setIsLiked(e.isLiked))).catch((e=>{console.error(e)})):i.likeCard(e).then((e=>this.setIsLiked(e.isLiked))).catch((e=>{console.error(e)}))}const q=new r(h,(function(e){q.renderLoading(!0),i.addCard(e).then((e=>{y(e),q.reset(),q.close(),f.disableSubmitButton()})).finally((()=>{q.renderLoading(!1)})).catch((e=>{console.error("Error adding a new card:",e)}))}),S);d.addEventListener("click",(()=>{q.open()}));const B=new class{constructor(e){let{nameSelector:t,aboutSelector:s,avatarSelector:n}=e;this._nameElement=document.querySelector(t),this._aboutElement=document.querySelector(s),this._avatarElement=document.querySelector(n)}getUserInfo(){return{name:this._nameElement.textContent,about:this._aboutElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){this._nameElement.textContent=e.name,this._aboutElement.textContent=e.about}setUserAvatar(e){this._avatarElement.src=e.avatar}}({nameSelector:".profile__name",aboutSelector:".profile__title",avatarSelector:".profile-photo-edit__image"});i.getData().then((e=>{let[t,s]=e;B.setUserInfo(t),B.setUserAvatar(t),L=new n({data:s,renderer:y},_),L.renderItems()})).catch((e=>{console.error(e)}));const w=new r(v,(function(e){w.renderLoading(!0),i.updateProfileImage(e).then((()=>{B.setUserAvatar(e),w.reset(),w.close()})).finally((()=>{w.renderLoading(!1)})).catch((e=>{console.error("Error updating a new image:",e)}))}),S);u.addEventListener("click",(()=>{w.open()}));const U=new r(a,(function(e){U.renderLoading(!0),i.updateUserInfo(e).then((e=>{B.setUserInfo(e),U.close()})).finally((()=>{U.renderLoading(!1)})).catch((e=>{console.error("Error adding a new card:",e)}))}),S);c.addEventListener("click",(()=>{const e=B.getUserInfo();U.setInputValues(e),U.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,